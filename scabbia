#!/usr/bin/env php
<?php
/**
 * Scabbia2 PHP Framework Skeleton Project
 * http://www.scabbiafw.com/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @link        http://github.com/scabbiafw/scabbia2-skel for the canonical source repository
 * @copyright   2010-2013 Scabbia Framework Organization. (http://www.scabbiafw.com/)
 * @license     http://www.apache.org/licenses/LICENSE-2.0 - Apache License, Version 2.0
 */

// MD # console initialization
if (PHP_SAPI !== "cli") {
    throw new RuntimeException("scabbia only runs under Command Line Interface (CLI).");
}

if (count($_SERVER["argv"]) <= 1) {
    throw new RuntimeException("scabbia needs a task to run.");
}

$tParameters = array_slice($_SERVER["argv"], 1);

if (trim($tParameters[0]) === "upgrade") {
    $tPhpCmd = "php -dsafe_mode=0";

    if (!file_exists("composer.phar")) {
        passthru($tPhpCmd . " -r \"eval('?' . '>' . file_get_contents('https://getcomposer.org/installer'));\"");
	}

	$tComposerCmd = $tPhpCmd . " composer.phar";

	if (file_exists("vendor")) {
		passthru($tComposerCmd . " update");
	} else {
		passthru($tComposerCmd . " install");
	}

    exit;
}

// MD # autoloader initialization
// MD - determine the vendor path
$tVendorPath = __DIR__ . "/vendor";

// MD - instantiate and register the loader
require "{$tVendorPath}/scabbiafw/scabbia2-fw/src/Loaders/Loader.php";
$tLoader = \Scabbia\Loaders\Loader::init("{$tVendorPath}/composer");

// MD # framework initialization
// TODO Instead of "Tasks" static class, a console application can be created
use Scabbia\Framework\Core;
use Scabbia\Tasks\Tasks;

// MD - initializes the autoloader and framework variables.
Core::init($tLoader);

// MD - read the task definitions from tasks.yml file and cache its content into cache/tasks.yml.php
Tasks::load("tasks.yml");

// MD - execute which task is going to run
$tExitCode = Tasks::execute($tParameters);
exit($tExitCode);
